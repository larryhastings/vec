#!/usr/bin/env python3


import pygame.math

def generate(v, v2):
    print(f"        v = Vector2({v.x}, {v.y})")
    print(f"        v2 = Vector2({v2.x}, {v2.y})")
    print()

    interpolations = (0, 0.25, 0.3333333333333333, 0.5, 0.6666666666666666, 0.75, 1)

    for i in interpolations:
        result = v.lerp(v2, i)
        print(f"        result = v.lerp(v2, {i})")
        print(f"        pygame = Vector2({result.x}, {result.y})")
        print(f"        self.assertAlmostEqual(result.x, pygame.x, 7, f'{{result}} != {{pygame}}')")
        print(f"        self.assertAlmostEqual(result.y, pygame.y, 7, f'{{result}} != {{pygame}}')")

    print()

    interpolations +=  tuple(-i for i in interpolations if i)

    for i in interpolations:
        result = v.slerp(v2, i)
        print(f"        result = v.slerp(v2, {i})")
        print(f"        pygame = Vector2({result.x}, {result.y})")
        print(f"        self.assertAlmostEqual(result.x, pygame.x, 7, f'{{result}} != {{pygame}}')")
        print(f"        self.assertAlmostEqual(result.y, pygame.y, 7, f'{{result}} != {{pygame}}')")

    print()



print("    def testPygameLerpAndSlerp(self):")
print("        # Confirm vec2's default lerp and slerp produce the same result as pygame.")
print("        # This function was generated by resources/generate_pygame_tests.py in the vec repo.")

last_v = None

for t in (
    (12, 35),
    (224.22, 287.75),
    (-5, 14),
    (-8, -22),
    (33.7, 58.5),
    (-0.3, -0.22),
    ):
    v = pygame.math.Vector2(*t)
    if last_v is not None:
        generate(v, last_v)

    last_v = v
